How did viewing a diff between two versions of a file help you see the bug that was introduced?
With diff, I was able to see the line in the old file with the new version of the line in the new file immediately below. This made it easy to see that the word, space, was misspelled. This would have been much harder by comparing the two 1000 line files manually.
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Quite often I make a mistake or rephrase a sentence in the current version of a file. Then I look over the text and realize the previous version was correct or just better. By having access to the history of the file, I can revert to the previous version and then I'm ready to go. Otherwise I have to reconstruct what I did and that takes time and energy.
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having version automatically saved, like Google Docs does?
Being able to choose manually re when to create a commit, allows you to save when it makes sense logically - you've added a small feature, you've fixed a bug etc. This allows you to have a clear before/after scenario - how the program worked before this feature, how the program worked after this feature. If the programmer provides a decent commit message, manual commits are a form of documentation for the program.
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
When developing a program or a web site, typically the source exists in several files such a javascript file, a HTML file, a CSS file etc. The set of source files work together to create the working web site. When you add or modify a feature, you typically need to change more than one source files. You want a version control system that can handle in one commit, a change in two or more files, the addition of a new file perhaps and the rest of the files are unchanged. You want the version-control system such as Git, to be able put this in one logical commit.
How can you use the commands git log and git diff to view the history of files?
First you type in the command, git log in Git Bash. Then you scroll through and find the commit that you are interested in. Then you type in the command, git diff, enter a space, copy/paste the commit ID before the commit that you are interested, enter a space and copy/paste the commit ID of the commit that you are interested in.
How might using version control make you more confident to make changes that could break something?
Before I make a change, I can do a commit on code that I know is working properly. I can then change code, test it and do a new commit. If later on I find that the code has a major problem, I can do a checkout of the commit where I know the code was working i.e. the commit before I changed the code.
Now that you have your workspace set up, what do you want to try using Git for?
I look forward to using Git for the Web Developer Nanodegree projects. But first I would like to put this reflections file in a Git repository so I don't have to re-do any of the reflections. I already had to do this once with the first reflection which I accidentally deleted when I started the second reflection. 